from django.core.management.base import BaseCommand
from create_meeting_app.models import Meeting, Transcript
import os
from google.cloud import speech_v1p1beta1 as speech
from google.cloud import storage
from deepmultilingualpunctuation import PunctuationModel

# Load env vars
GCS_BUCKET = os.getenv('GCS_BUCKET_NAME')
KEY_PATH = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')

# Initialize clients
speech_client = speech.SpeechClient.from_service_account_file(KEY_PATH)
storage_client = storage.Client.from_service_account_json(KEY_PATH)

# Your custom English words dictionary (Bangla phonetic to English)
ENGLISH_WORDS = {
    "‡¶∏‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏‡¶≤‡¶ø": "seriously",
    "‡¶π‡ßã‡¶Æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï": "homework",
    "‡¶π‡¶æ‡¶á": "hi",
    "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã": "hello",
    "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶è‡¶≠‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶®": "hello everyone",
    "‡¶è‡¶≠‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶®":"everyone",
    "‡¶ó‡ßÅ‡¶° ‡¶Æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç": "good morning",
    "‡¶ó‡ßÅ‡¶° ‡¶®‡¶æ‡¶á‡¶ü": "good night",
    "‡¶ó‡ßÅ‡¶° ‡¶á‡¶≠‡¶ø‡¶®‡¶ø‡¶Ç": "good evening",
    "‡¶ü‡ßá‡¶®‡¶∂‡¶®": "tension",
    "‡¶Æ‡¶ø‡¶°": "mid",
    "‡¶Æ‡¶ø‡¶°‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ": "midterm",
    "‡¶è‡¶ï‡ßç‡¶∏‡¶æ‡¶Æ": "exam",
    "‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤": "final",
    "‡¶ï‡ßÅ‡¶á‡¶ú": "quiz",
    "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü": "assignment",
    "‡¶™‡ßç‡¶∞‡ßá‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®": "presentation",
    "‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü": "submit",
    "‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶∂‡¶®": "submission",
    "‡¶°‡ßá‡¶°‡¶≤‡¶æ‡¶á‡¶®": "deadline",
    "‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨": "lab",
    "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü": "project",
    "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï": "project work",
    "‡¶ï‡ßç‡¶≤‡¶æ‡¶∏": "class",
    "‡¶≤‡ßá‡¶ï‡¶ö‡¶æ‡¶∞": "lecture",
    "‡¶∞‡¶ø‡¶∏‡¶æ‡¶∞‡ßç‡¶ö": "research",
    "‡¶•‡¶ø‡¶∏‡¶ø‡¶∏": "thesis",
    "‡¶ú‡¶ø‡¶™‡¶ø‡¶è": "GPA",
    "‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü": "credit",
    "‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞": "semester",
    "‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü": "result",
    "‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü‡ßá‡¶°": "resulted",
    "‡¶∂‡¶∞‡ßç‡¶ü": "short",
    "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶∏": "marks",
    "‡¶®‡¶Æ‡ßç‡¶¨‡¶∞": "marks",
    "‡¶™‡¶æ‡¶∞‡¶∏‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶ú": "percentage",
    "‡¶∞‡ßã‡¶≤": "roll",
    "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®": "registration",
    "‡¶Ü‡¶ü‡ßá‡¶®‡ßç‡¶°‡ßá‡¶®‡ßç‡¶∏": "attendance",
    "‡¶ü‡¶ø‡¶ö‡¶æ‡¶∞": "teacher",
    "‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞": "sir",
    "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ": "madam",
    "‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏": "conference",
    "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶®": "intern",
    "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶®‡¶∂‡¶ø‡¶™": "internship",
    "‡¶°‡ßç‡¶∞‡¶™": "drop",
    "‡¶á‡¶Æ‡¶™‡ßç‡¶∞‡ßÅ‡¶≠": "improve",
    "‡¶Æ‡¶°‡¶æ‡¶∞‡ßá‡¶∂‡¶®": "moderation",
    "‡¶ó‡ßç‡¶∞‡ßá‡¶°": "grade",
    "‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ": "term",
    "‡¶á‡¶â‡¶®‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶ü‡¶ø": "university",
    "‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶æ‡¶∏": "campus",
    "‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞": "regular",
    "‡¶á‡ßü‡¶æ‡¶∞": "year",
    "‡¶¨‡ßç‡¶∞‡ßá‡¶ï": "break",
    "‡¶≠‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶∂‡¶®": "vacation",
    "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶•": "math",
    "‡¶´‡¶ø‡¶ú‡¶ø‡¶ï‡ßç‡¶∏": "physics",
    "‡¶ï‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø": "chemistry",
    "‡¶¨‡¶æ‡ßü‡ßã": "biology",
    "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞": "computer",
    "‡¶™‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶ï‡¶æ‡¶≤": "practical",
    "‡¶´‡¶∞‡ßç‡¶Æ": "form",
    "‡¶®‡ßã‡¶ü‡¶ø‡¶∏": "notice",
    "‡¶≠‡¶æ‡¶á‡¶≠‡¶æ": "viva",
    "‡¶Ö‡¶´‡¶ø‡¶∏": "office",
    "‡¶°‡¶ø‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü": "department",
    "‡¶´‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶≤‡ßç‡¶ü‡¶ø": "faculty",
    "‡¶∏‡¶ø‡¶≠‡¶ø": "CV",
    "‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü": "certificate",
    "‡¶Ü‡¶á‡¶°‡¶ø": "ID",
    "‡¶∂‡¶ø‡¶´‡¶ü": "shift",
    "‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®": "online",
    "‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®": "offline",
    "‡¶ú‡ßÅ‡¶Æ": "Zoom",
    "‡¶Æ‡¶ø‡¶ü": "Meet",
    "‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶Æ‡¶ø‡¶ü": "Google Meet",
    "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶∞": "projector",
    "‡¶∏‡ßç‡¶≤‡¶æ‡¶á‡¶°": "slide",
    "‡¶ó‡ßÅ‡¶ó‡¶≤": "Google",
    "‡¶°‡ßç‡¶∞‡¶æ‡¶á‡¶≠": "Drive",
    "‡¶´‡¶æ‡¶á‡¶≤": "file",
    "‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞": "folder",
    "‡¶™‡¶ø‡¶°‡¶ø‡¶è‡¶´": "PDF",
    "‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°": "Word",
    "‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü": "PowerPoint",
    "‡¶®‡ßã‡¶ü": "note",
    "‡¶®‡ßã‡¶ü‡¶∏": "notes",
    "‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶®": "calculation",
    "‡¶∏‡¶ø‡¶≤‡ßá‡¶¨‡¶æ‡¶∏": "syllabus",
    "‡¶ï‡ßã‡¶∞‡ßç‡¶∏": "course",
    "‡¶∏‡¶æ‡¶ú‡ßá‡¶∂‡¶®": "suggestion",
    "‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø": "study",
    "‡¶™‡ßú‡¶æ‡¶∂‡ßã‡¶®‡¶æ": "study",
    "‡¶™‡ßç‡¶∞‡¶ø‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®": "preparation",
    "‡¶∞‡¶ø‡¶≠‡¶ø‡¶∂‡¶®": "revision",
    "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø": "group study",
    "‡¶°‡¶ø‡¶â": "due",
    "‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞": "reminder",
    "‡¶ü‡¶æ‡¶∏‡ßç‡¶ï": "task",
    "‡¶ï‡¶®‡¶∏‡¶æ‡¶≤‡ßç‡¶ü": "consult",
    "‡¶Ü‡¶´‡¶ü‡¶æ‡¶∞‡¶ï‡ßç‡¶≤‡¶æ‡¶∏": "after class",
    "‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ": "extra",
    "‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ü‡ßá‡¶∏‡ßç‡¶ü": "class test",
    "‡¶Æ‡¶°‡ßá‡¶≤‡¶ü‡ßá‡¶∏‡ßç‡¶ü": "model test",
    "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶∞": "registrar",
    "‡¶°‡¶ø‡¶®": "dean",
    "‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ": "confirm",
    "‡¶ö‡ßá‡¶ï": "check",
    "‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶ü": "complete",
    "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®": "application",
    "‡¶è‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®": "application",
    "‡¶è‡¶™‡ßç‡¶≤‡¶æ‡¶á": "apply",
    "‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü": "document",
    "‡¶≤‡¶ó‡¶á‡¶®": "login",
    "‡¶∏‡¶æ‡¶á‡¶®‡¶Ü‡¶™": "signup",
    "‡¶á‡¶Æ‡ßá‡¶á‡¶≤": "email",
    "‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶°‡¶á‡¶®": "LinkedIn",
    "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶∏‡ßá‡¶ú": "message",
    "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü": "group chat",
    "‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®": "notification",
    "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™": "app",
    "‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°": "download",
    "‡¶Ü‡¶™‡¶≤‡ßã‡¶°": "upload",
    "‡¶ú‡¶æ‡¶∞‡ßç‡¶®‡¶æ‡¶≤": "journal",
    "‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶∏": "reference",
    "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü": "report",
    "‡¶´‡¶ø‡¶°‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï": "feedback",
    "‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßá‡¶®‡ßç‡¶∏": "performance",
    "‡¶ï‡ßã‡¶Ö‡¶∞‡ßç‡¶°‡¶ø‡¶®‡ßá‡¶ü": "coordinate",
    "‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç": "meeting",
    "‡¶°‡¶ø‡¶∏‡¶ï‡¶æ‡¶∂‡¶®": "discussion",
    "‡¶™‡¶æ‡¶∞‡¶∏‡ßã‡¶®‡¶æ‡¶≤": "personal",
    "‡¶Ö‡¶´‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤": "official",
    "‡¶ì‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶∏": "once",
    "‡¶ü‡¶æ‡¶á‡¶Æ": "time",
    "‡¶°‡ßá‡¶ü": "date",
    "‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®": "plan",
    "‡¶∞‡¶ø‡¶≤‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏": "relax",
    "‡¶¨‡¶ø‡¶ú‡¶ø": "busy",
    "‡¶ï‡ßç‡¶Ø‡¶æ‡¶ú‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤": "casual",
    "‡¶á‡¶Æ‡ßç‡¶™‡¶∞‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü": "important",
    "‡¶á‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶ü‡¶≤‡¶ø": "immediately",
    "‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤‡¶ø": "finally",
    "‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π": "InshaAllah",
    "‡¶Ü‡¶≤‡¶π‡¶æ‡¶Æ‡¶¶‡ßÅ‡¶≤‡¶ø‡¶≤‡ßç‡¶≤‡¶æ‡¶π": "Alhamdulillah",
    "‡¶∏‡¶æ‡¶¨‡¶æ‡¶®‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π": "SubhanAllah",
    "‡¶á‡¶Ø‡¶º‡ßá‡¶∏": "yes",
    "‡¶®‡ßã": "no",
    "‡¶ì‡¶ï‡ßá": "okay",
    "‡¶≠‡ßá‡¶∞‡¶ø ‡¶ó‡ßÅ‡¶°": "very good",
    "‡¶•‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï ‡¶á‡¶â": "thank you",
    "‡¶ì‡¶Ø‡¶º‡ßá‡¶≤ ‡¶°‡¶æ‡¶®": "well done",
    "‡¶ï‡¶®‡¶ó‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ö‡ßÅ‡¶≤‡ßá‡¶∂‡¶®‡¶∏": "congratulations",
    "‡¶¨‡ßá‡¶∏‡ßç‡¶ü ‡¶Ö‡¶´ ‡¶≤‡¶æ‡¶ï": "best of luck"
}


def restore_english_words(text):
    for bangla_word, english_word in ENGLISH_WORDS.items():
        text = text.replace(bangla_word, english_word)
    return text

class Command(BaseCommand):
    help = "Transcribe WAV files in Bangla with smart punctuation"

    def add_arguments(self, parser):
        parser.add_argument('meeting_id', type=int)

    def handle(self, *args, **options):
        meeting_id = options['meeting_id']
        meeting = Meeting.objects.filter(id=meeting_id).first()
        if not meeting:
            return self.stderr.write("‚ùå Meeting not found.")

        recordings = sorted(
            f for f in os.listdir("media/recordings")
            if f.endswith(".wav") and f"_{meeting_id}_" in f
        )
        if not recordings:
            return self.stdout.write("üì≠ No recordings found.")

        # Load punctuation model once
        punctuator = PunctuationModel()

        for wav_file in recordings:
            path = os.path.join("media/recordings", wav_file)
            gcs_uri = f"gs://{GCS_BUCKET}/{wav_file}"
            self.stdout.write(f"üó£ Transcribing {wav_file}‚Ä¶")

            try:
                # 1) Upload WAV to GCS
                bucket = storage_client.bucket(GCS_BUCKET)
                blob = bucket.blob(wav_file)
                blob.upload_from_filename(path)
                self.stdout.write(f"‚òÅÔ∏è Uploaded to {gcs_uri}")

                # 2) Transcription config
                config = speech.RecognitionConfig(
                    encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                    sample_rate_hertz=16000,
                    language_code="bn-BD",
                    alternative_language_codes=["en-US"],
                    enable_automatic_punctuation=True,
                    model="latest_long"
                )
                audio = speech.RecognitionAudio(uri=gcs_uri)

                # 3) Transcribe
                operation = speech_client.long_running_recognize(config=config, audio=audio)
                response = operation.result(timeout=600)

                # 4) Join raw transcripts
                raw_text = "\n\n".join(
                    result.alternatives[0].transcript.strip()
                    for result in response.results
                )

                # 5) Punctuate and convert full stops to Bangla danda
                punctuated = punctuator.restore_punctuation(raw_text)
                punctuated_bangla = punctuated.replace('.', '‡•§')

                # 5.1) Restore English words from your custom dictionary
                final_text = restore_english_words(punctuated_bangla)

                # 6) Save to DB
                Transcript.objects.create(
                    meeting=meeting,
                    text=final_text
                )

                # 7) Clean up
                os.remove(path)
                blob.delete()
                self.stdout.write("‚úÖ Transcription complete and cleaned up.")

            except Exception as e:
                self.stderr.write(f"‚ö†Ô∏è Error: {e}")
