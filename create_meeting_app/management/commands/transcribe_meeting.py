from django.core.management.base import BaseCommand
from create_meeting_app.models import Meeting, Transcript, TranscriptSegment
import os
import datetime
from google.cloud import speech_v1p1beta1 as speech
from google.cloud import storage
from deepmultilingualpunctuation import PunctuationModel

GCS_BUCKET = os.getenv('GCS_BUCKET_NAME')
KEY_PATH = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')

speech_client = speech.SpeechClient.from_service_account_file(KEY_PATH)
storage_client = storage.Client.from_service_account_json(KEY_PATH)

ENGLISH_WORDS = {
    "‡¶∏‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏‡¶≤‡¶ø": "seriously",
    "‡¶π‡ßã‡¶Æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï": "homework",
    "‡¶π‡¶æ‡¶á": "hi",
    "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã": "hello",
    "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶è‡¶≠‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶®": "hello everyone",
    "‡¶è‡¶≠‡¶∞‡¶ø‡¶ì‡¶Ø‡¶º‡¶æ‡¶®": "everyone",
    "‡¶ó‡ßÅ‡¶° ‡¶Æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç": "good morning",
    "‡¶ó‡ßÅ‡¶° ‡¶®‡¶æ‡¶á‡¶ü": "good night",
    "‡¶ó‡ßÅ‡¶° ‡¶á‡¶≠‡¶ø‡¶®‡¶ø‡¶Ç": "good evening",
    "‡¶ü‡ßá‡¶®‡¶∂‡¶®": "tension",
    "‡¶Æ‡¶ø‡¶°‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ": "midterm",
    "‡¶ï‡ßÅ‡¶á‡¶ú": "quiz",
    "‡¶™‡ßç‡¶∞‡ßá‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶®": "presentation",
    "‡¶°‡ßá‡¶°‡¶≤‡¶æ‡¶á‡¶®": "deadline",
    "‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü": "result",
    "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü": "assignment",
    "‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶∏": "marks",
    "‡¶ï‡ßç‡¶≤‡¶æ‡¶∏": "class",
    "‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü": "project",
    "‡¶á‡¶â‡¶®‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶ø‡¶ü‡¶ø": "university",
    "‡¶∏‡ßá‡¶Æ‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞": "semester",
    "‡¶•‡¶ø‡¶∏‡¶ø‡¶∏": "thesis",
    "‡¶∏‡ßç‡¶ü‡¶æ‡¶°‡¶ø": "study",
    "‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤": "final",
    "‡¶Ü‡¶ü‡ßá‡¶®‡ßç‡¶°‡ßá‡¶®‡ßç‡¶∏": "attendance",
    "‡¶≤‡ßá‡¶ï‡¶ö‡¶æ‡¶∞": "lecture",
    "‡¶ó‡ßÅ‡¶ó‡¶≤": "Google",
    "‡¶Æ‡¶ø‡¶ü": "Meet",
    "‡¶™‡¶ø‡¶°‡¶ø‡¶è‡¶´": "PDF",
    "‡¶®‡ßã‡¶ü": "note",
    "‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®": "registration",
    "‡¶ü‡¶ø‡¶ö‡¶æ‡¶∞": "teacher",
    "‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞": "sir",
    "‡¶Æ‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶Æ": "madam"
    # You can keep adding more if needed
}

def restore_english_words(text):
    for bn, en in ENGLISH_WORDS.items():
        text = text.replace(bn, en)
    return text

def get_seconds(d):
    """
    Return total seconds of a protobuf Duration or a datetime.timedelta.
    """
    if hasattr(d, 'nanos'):
        return d.seconds + d.nanos / 1e9
    else:
        return d.total_seconds()

class Command(BaseCommand):
    help = "Transcribe WAV files in Bangla with smart punctuation & pause-based segments"

    def add_arguments(self, parser):
        parser.add_argument('meeting_id', type=int)

    def handle(self, *args, **options):
        mid = options['meeting_id']
        meeting = Meeting.objects.filter(id=mid).first()
        if not meeting:
            return self.stderr.write("‚ùå Meeting not found.")

        recordings = sorted(f for f in os.listdir("media/recordings")
                            if f.endswith('.wav') and f"_{mid}_" in f)
        if not recordings:
            return self.stdout.write("üì≠ No recordings found.")

        punctuator = PunctuationModel()

        for wav in recordings:
            path = os.path.join("media/recordings", wav)
            gcs_uri = f"gs://{GCS_BUCKET}/{wav}"
            self.stdout.write(f"üó£ Transcribing {wav}‚Ä¶")

            try:
                # Upload
                bucket = storage_client.bucket(GCS_BUCKET)
                blob = bucket.blob(wav)
                blob.upload_from_filename(path)

                # Recognize
                config = speech.RecognitionConfig(
                    encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                    sample_rate_hertz=16000,
                    language_code='bn-BD',
                    alternative_language_codes=['en-US'],
                    enable_word_time_offsets=True,
                    enable_automatic_punctuation=True,
                    model='latest_long'
                )
                audio = speech.RecognitionAudio(uri=gcs_uri)
                op = speech_client.long_running_recognize(config=config, audio=audio)
                resp = op.result(timeout=600)

                # Build transcript
                raw = "\n\n".join(r.alternatives[0].transcript.strip() for r in resp.results)
                punct = punctuator.restore_punctuation(raw).replace('.', '‡•§')
                final_text = restore_english_words(punct)

                transcript = Transcript.objects.create(
                    meeting=meeting,
                    raw_text=raw,
                    text=final_text
                )

                # Segment by pauses
                for result in resp.results:
                    words = result.alternatives[0].words
                    buffer = ""
                    start_time_proto = None
                    prev_end_sec = None

                    for idx, w in enumerate(words):
                        sec_start = get_seconds(w.start_time)
                        sec_end = get_seconds(w.end_time)

                        if start_time_proto is None:
                            start_time_proto = w.start_time
                        buffer += w.word + " "

                        # Compute pause from previous word
                        pause = sec_start - prev_end_sec if prev_end_sec is not None else 0
                        end_of_audio = (idx == len(words) - 1)

                        # Split if long pause or end of this result
                        if pause > 0.8 or end_of_audio:
                            tot_start = get_seconds(start_time_proto)
                            tot_end = sec_end

                            start_td = datetime.timedelta(seconds=tot_start)
                            end_td = datetime.timedelta(seconds=tot_end)

                            TranscriptSegment.objects.create(
                                transcript=transcript,
                                text=buffer.strip(),
                                start_time=start_td,
                                end_time=end_td
                            )
                            buffer = ""
                            start_time_proto = None

                        prev_end_sec = sec_end

                # Cleanup
                os.remove(path)
                blob.delete()
                self.stdout.write("‚úÖ Transcription & segmentation complete.")

            except Exception as e:
                self.stderr.write(f"‚ö†Ô∏è Error: {e}")